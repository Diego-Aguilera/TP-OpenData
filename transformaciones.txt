[
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column LOCALIDADES using expression grel:replace(value, \"-\",\",\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LOCALIDADES",
    "expression": "grel:replace(value, \"-\",\",\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column LOCALIDADES using expression grel:replace(value, \" –\",\",\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LOCALIDADES",
    "expression": "grel:replace(value, \" –\",\",\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column LOCALIDADES using expression grel:replace(value, \" ,\",\",\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "LOCALIDADES",
    "expression": "grel:replace(value, \" ,\",\",\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-split",
    "description": "Split column DEPARTAMENTO-CIUDAD by separator",
    "engineConfig": {
      "facets": [
        {
          "name": "ESTADO",
          "columnName": "ESTADO",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "DEPARTAMENTO-CIUDAD",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": " - ",
    "regex": false,
    "maxColumns": 2
  },
  {
    "op": "core/column-rename",
    "description": "Rename column DEPARTAMENTO-CIUDAD 2 to CIUDAD",
    "oldColumnName": "DEPARTAMENTO-CIUDAD 2",
    "newColumnName": "CIUDAD"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column DEPARTAMENTO-CIUDAD 1 to DEPARTAMENTO",
    "oldColumnName": "DEPARTAMENTO-CIUDAD 1",
    "newColumnName": "DEPARTAMENTO"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column INVERSION using expression value.replace(/\\bGs\\. \\b/i,\"\")",
    "engineConfig": {
      "facets": [
        {
          "name": "ESTADO",
          "columnName": "ESTADO",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "INVERSION",
    "expression": "value.replace(/\\bGs\\. \\b/i,\"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-rename",
    "description": "Rename column INVERSION to INVERSION (GS.)",
    "oldColumnName": "INVERSION",
    "newColumnName": "INVERSION (GS.)"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column INVERSION (GS.) using expression grel:replace(value, \".\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "INVERSION (GS.)",
    "expression": "grel:replace(value, \".\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column INVERSION (GS.) using expression jython:replace(value, \"USD \", value)",
    "engineConfig": {
      "facets": [
        {
          "name": "INVERSION (GS.)",
          "columnName": "INVERSION (GS.)",
          "query": "USD",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "INVERSION (GS.)",
    "expression": "jython:replace(value, \"USD \", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-split",
    "description": "Split column INVERSION (GS.) by separator",
    "engineConfig": {
      "facets": [
        {
          "name": "INVERSION (GS.)",
          "columnName": "INVERSION (GS.)",
          "query": "USD",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "INVERSION (GS.)",
    "guessCellType": true,
    "removeOriginalColumn": false,
    "mode": "separator",
    "separator": "USD ",
    "regex": false,
    "maxColumns": 2
  },
  {
    "op": "core/column-rename",
    "description": "Rename column INVERSION (GS.) 2 to INVERSION (USD)",
    "oldColumnName": "INVERSION (GS.) 2",
    "newColumnName": "INVERSION (USD)"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column INVERSION (GS.) using expression ",
    "engineConfig": {
      "facets": [
        {
          "name": "INVERSION (GS.)",
          "columnName": "INVERSION (GS.)",
          "query": "USD",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "INVERSION (GS.)",
    "expression": "",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column INVERSION (GS.) using expression grel:replace(value, *, \"\")",
    "engineConfig": {
      "facets": [
        {
          "name": "INVERSION (GS.)",
          "columnName": "INVERSION (GS.)",
          "query": "USD",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "INVERSION (GS.)",
    "expression": "grel:replace(value, *, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/blank-down",
    "description": "Blank down cells in column INVERSION (GS.)",
    "engineConfig": {
      "facets": [
        {
          "name": "INVERSION (GS.)",
          "columnName": "INVERSION (GS.)",
          "query": "USD",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "INVERSION (GS.)"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column INVERSION (GS.) using expression \"\"",
    "engineConfig": {
      "facets": [
        {
          "name": "INVERSION (GS.)",
          "columnName": "INVERSION (GS.)",
          "query": "USD",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "INVERSION (GS.)",
    "expression": "\"\"",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-removal",
    "description": "Remove column INVERSION (GS.) 1",
    "columnName": "INVERSION (GS.) 1"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column INVERSION (GS.) using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "INVERSION (GS.)",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column AVANCE using expression grel:replace(value, \"%\", \"\").toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "AVANCE",
    "expression": "grel:replace(value, \"%\", \"\").toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-rename",
    "description": "Rename column AVANCE to AVANCE (%)",
    "oldColumnName": "AVANCE",
    "newColumnName": "AVANCE (%)"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column PLAZO to PLAZO (Meses)",
    "oldColumnName": "PLAZO",
    "newColumnName": "PLAZO (Meses)"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column PLAZO (Meses) using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "PLAZO (Meses)",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column INICIO using expression jython:return value.split(' ', 1)[1]",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "INICIO",
    "expression": "jython:return value.split(' ', 1)[1]",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column FIN using expression jython:return value.split(' ', 1)[1]",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "FIN",
    "expression": "jython:return value.split(' ', 1)[1]",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column INICIO using expression jython:m = {\n'enero': \"01\",\n'febrero': \"02\",\n'marzo': \"03\",\n'abril': \"04\",\n'mayo': \"05\",\n'junio': \"06\",\n'julio': \"07\",\n'agosto': \"08\",\n'septiembre': \"09\",\n'octubre': \"10\",\n'noviembre': \"11\",\n'diciembre': \"12\"\n}\n\nvalue = value.replace(\" \",\"-\")\n\nfecha = value.split(\"-\")\ndia = fecha[0]\nmes = fecha[1]\nanio = fecha[2]\n\ntry:\n    out = str(m[mes.lower()])\n    return dia+\"-\"+out+\"-\"+anio\nexcept:\n    raise ValueError('No es un mes')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "INICIO",
    "expression": "jython:m = {\n'enero': \"01\",\n'febrero': \"02\",\n'marzo': \"03\",\n'abril': \"04\",\n'mayo': \"05\",\n'junio': \"06\",\n'julio': \"07\",\n'agosto': \"08\",\n'septiembre': \"09\",\n'octubre': \"10\",\n'noviembre': \"11\",\n'diciembre': \"12\"\n}\n\nvalue = value.replace(\" \",\"-\")\n\nfecha = value.split(\"-\")\ndia = fecha[0]\nmes = fecha[1]\nanio = fecha[2]\n\ntry:\n    out = str(m[mes.lower()])\n    return dia+\"-\"+out+\"-\"+anio\nexcept:\n    raise ValueError('No es un mes')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column FIN using expression jython:m = {\n'enero': \"01\",\n'febrero': \"02\",\n'marzo': \"03\",\n'abril': \"04\",\n'mayo': \"05\",\n'junio': \"06\",\n'julio': \"07\",\n'agosto': \"08\",\n'septiembre': \"09\",\n'octubre': \"10\",\n'noviembre': \"11\",\n'diciembre': \"12\"\n}\n\nvalue = value.replace(\" \",\"-\")\n\nfecha = value.split(\"-\")\ndia = fecha[0]\nmes = fecha[1]\nanio = fecha[2]\n\ntry:\n    out = str(m[mes.lower()])\n    return dia+\"-\"+out+\"-\"+anio\nexcept:\n    raise ValueError('No es un mes')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "FIN",
    "expression": "jython:m = {\n'enero': \"01\",\n'febrero': \"02\",\n'marzo': \"03\",\n'abril': \"04\",\n'mayo': \"05\",\n'junio': \"06\",\n'julio': \"07\",\n'agosto': \"08\",\n'septiembre': \"09\",\n'octubre': \"10\",\n'noviembre': \"11\",\n'diciembre': \"12\"\n}\n\nvalue = value.replace(\" \",\"-\")\n\nfecha = value.split(\"-\")\ndia = fecha[0]\nmes = fecha[1]\nanio = fecha[2]\n\ntry:\n    out = str(m[mes.lower()])\n    return dia+\"-\"+out+\"-\"+anio\nexcept:\n    raise ValueError('No es un mes')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  }
]